/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package buet.cse6705.group8;

import buet.cse6705.group8.utils.Utils;
import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.Timer;
import java.util.TimerTask;

/**
 * @author sharafat
 */
public class Gui extends javax.swing.JFrame {

    private static final Logger log = LoggerFactory.getLogger(Gui.class);
    private boolean stopExecution;

    private final JFileChooser inputFileChooser = new JFileChooser();
    private final JFileChooser outputFileChooser = new JFileChooser();
    private final JFileChooser outputFolderChooser = new JFileChooser();

    private BufferedReader in = null;
    private BufferedWriter out = null;

    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
        outputFolderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputSourceRadioButtonGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        inputFilePathInput = new javax.swing.JTextField();
        resultLabel = new javax.swing.JLabel();
        outputFileBrowseButton = new javax.swing.JButton();
        inputFileBrowseButton = new javax.swing.JButton();
        inputFileLabel = new javax.swing.JLabel();
        viewHtmlLogButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        hourSpinner = new javax.swing.JSpinner();
        minuteSpinner = new javax.swing.JSpinner();
        secondSpinner = new javax.swing.JSpinner();
        maxNoOfIndividualsInSeedSpinner = new javax.swing.JSpinner();
        maxNoOfIndividualsInDiversePopulationSpinner = new javax.swing.JSpinner();
        maxNoOfFittestIndividualsToSelectSpinner = new javax.swing.JSpinner();
        maxNoOfMostDiverseIndividualsToSelectSpinner = new javax.swing.JSpinner();
        valueOfTInTournamentSelectionForDiversePopulationSpinner = new javax.swing.JSpinner();
        mutationProbabilitySpinner = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        useDfsRotCheckbox = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        crossoverProbabilitySpinner = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        useSucc2RevCheckbox = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        valueOfTInTournamentSelectionForFittestIndividualsSpinner = new javax.swing.JSpinner();
        valueOfTInTournamentSelectionForMostDiverseIndividualsSpinner = new javax.swing.JSpinner();
        startButton = new javax.swing.JButton();
        viewTextLogButton = new javax.swing.JButton();
        singleInputRadio = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        loggingLevelCombo = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        terminationStrategyCombo = new javax.swing.JComboBox();
        terminationParameterSpinner = new javax.swing.JSpinner();
        permutationInputLabel = new javax.swing.JLabel();
        fileInputRadio = new javax.swing.JRadioButton();
        outputFilePathInput = new javax.swing.JTextField();
        outputFileLabel = new javax.swing.JLabel();
        permutationInput = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        minMaxCalculatorInputFileInput = new javax.swing.JTextField();
        minMaxCalculatorFileInputBrowseButton = new javax.swing.JButton();
        minMaxCalculatorOutputFolderInput = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        minMaxCalculatorFolderInputBrowseButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();
        minMaxOutputBrowseButton = new javax.swing.JButton();
        minMaxOutputFileInput = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sorting By Reversal");

        resultLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        resultLabel.setAutoscrolls(true);
        resultLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));
        resultLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        outputFileBrowseButton.setText("Browse");
        outputFileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFileBrowseButtonActionPerformed(evt);
            }
        });

        inputFileBrowseButton.setText("Browse");
        inputFileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileBrowseButtonActionPerformed(evt);
            }
        });

        inputFileLabel.setText("Input File:");

        viewHtmlLogButton.setText("View HTML Log");
        viewHtmlLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHtmlLogButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Knobs"));

        jLabel2.setText("Max. no. of individuals in Diverse Population:");

        jLabel3.setText("Max. no. of individuals in Seed:");

        jLabel4.setText("Value of T in Tournament Selection for this:");

        jLabel5.setText("Max. no. of fittest individuals to select:");

        jLabel6.setText("Max. no. of most diverse individuals to select:");

        jLabel7.setText("Mutation Probability:");

        jLabel8.setText("Max. running time of algorithm (hh:mm:ss):");
        jLabel8.setEnabled(false);

        hourSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        hourSpinner.setEnabled(false);

        minuteSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        minuteSpinner.setEnabled(false);

        secondSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        secondSpinner.setEnabled(false);

        maxNoOfIndividualsInSeedSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5), Integer.valueOf(2), null, Integer.valueOf(1)));

        maxNoOfIndividualsInDiversePopulationSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(2), null, Integer.valueOf(1)));

        maxNoOfFittestIndividualsToSelectSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        maxNoOfMostDiverseIndividualsToSelectSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2), Integer.valueOf(2), null, Integer.valueOf(1)));

        valueOfTInTournamentSelectionForDiversePopulationSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2), Integer.valueOf(2), null, Integer.valueOf(1)));

        mutationProbabilitySpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.2f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.05f)));

        jLabel10.setText("Use DFS_ROT");

        useDfsRotCheckbox.setSelected(true);

        jLabel11.setText("Crossover Probability:");

        crossoverProbabilitySpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.2f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.05f)));

        jLabel13.setText("Use Successive 2 Reversal Preprocessing:");

        useSucc2RevCheckbox.setSelected(true);

        jLabel14.setText("Value of T in Tournament Selection for this:");

        jLabel15.setText("Value of T in Tournament Selection for this:");

        valueOfTInTournamentSelectionForFittestIndividualsSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2), Integer.valueOf(2), null, Integer.valueOf(1)));

        valueOfTInTournamentSelectionForMostDiverseIndividualsSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2), Integer.valueOf(2), null, Integer.valueOf(1)));

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel8)
                            .add(jLabel3))
                        .add(77, 77, 77)
                        .add(minuteSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(secondSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel7)
                            .add(jLabel10)
                            .add(jLabel11)
                            .add(jLabel13))
                        .add(38, 38, 38)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mutationProbabilitySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(useSucc2RevCheckbox)
                            .add(crossoverProbabilitySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(useDfsRotCheckbox)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(maxNoOfMostDiverseIndividualsToSelectSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel5)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(maxNoOfFittestIndividualsToSelectSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(maxNoOfIndividualsInSeedSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(maxNoOfIndividualsInDiversePopulationSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(hourSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .add(18, 18, 18)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel4)
                                .add(19, 19, 19)
                                .add(valueOfTInTournamentSelectionForDiversePopulationSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel14)
                                .add(18, 18, 18)
                                .add(valueOfTInTournamentSelectionForFittestIndividualsSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel15)
                                .add(18, 18, 18)
                                .add(valueOfTInTournamentSelectionForMostDiverseIndividualsSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(secondSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                                    .add(hourSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(maxNoOfIndividualsInSeedSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                                    .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(18, 18, 18)
                                    .add(jLabel3)))
                            .add(minuteSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(12, 12, 12)
                                .add(jLabel2)
                                .add(18, 18, 18)
                                .add(jLabel5))
                            .add(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel2Layout.createSequentialGroup()
                                        .add(maxNoOfIndividualsInDiversePopulationSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(maxNoOfFittestIndividualsToSelectSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel2Layout.createSequentialGroup()
                                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(valueOfTInTournamentSelectionForDiversePopulationSpinner)
                                            .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(valueOfTInTournamentSelectionForFittestIndividualsSpinner)
                                            .add(jLabel14, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(valueOfTInTournamentSelectionForMostDiverseIndividualsSpinner)
                    .add(maxNoOfMostDiverseIndividualsToSelectSpinner)
                    .add(jLabel15, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mutationProbabilitySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel11)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(crossoverProbabilitySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel13)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(useSucc2RevCheckbox)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(useDfsRotCheckbox)))))
        );

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        viewTextLogButton.setText("View Text Log");
        viewTextLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTextLogButtonActionPerformed(evt);
            }
        });

        inputSourceRadioButtonGroup.add(singleInputRadio);
        singleInputRadio.setContentAreaFilled(false);
        singleInputRadio.setName("single");
        singleInputRadio.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        singleInputRadio.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        singleInputRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleInputRadioActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Preferences"));

        jLabel9.setText("Logging Level:");

        loggingLevelCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TRACE", "DEBUG", "INFO", "WARN", "ERROR" }));

        jLabel12.setText("Terminate when");

        terminationStrategyCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "expected fitness is as good as or better than", "fitness hasn't changed for generation count of", "number of generations exceeds", "algorithm running time exceeds (seconds)" }));

        terminationParameterSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel9)
                    .add(jLabel12))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(terminationStrategyCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(loggingLevelCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(terminationParameterSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(terminationParameterSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel9)
                            .add(loggingLevelCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel12)
                            .add(terminationStrategyCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        permutationInputLabel.setText("Permutation (Space Seperated):");

        inputSourceRadioButtonGroup.add(fileInputRadio);
        fileInputRadio.setSelected(true);
        fileInputRadio.setName("file");
        fileInputRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileInputRadioActionPerformed(evt);
            }
        });

        outputFileLabel.setText("Output File:");

        permutationInput.setText("4 3 2 1 5 6 7 8 9 10");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(resultLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, startButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                .add(viewHtmlLogButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(viewTextLogButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(singleInputRadio)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(permutationInputLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(permutationInput))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(fileInputRadio)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(inputFileLabel)
                            .add(outputFileLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(outputFilePathInput)
                            .add(inputFilePathInput))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(inputFileBrowseButton)
                            .add(outputFileBrowseButton))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(singleInputRadio)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(permutationInputLabel)
                        .add(permutationInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(inputFileLabel)
                            .add(inputFilePathInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(inputFileBrowseButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(outputFileLabel)
                            .add(outputFilePathInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(outputFileBrowseButton)))
                    .add(fileInputRadio))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(startButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(viewTextLogButton)
                            .add(viewHtmlLogButton)))
                    .add(resultLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Sorting By Reversal", jPanel1);

        jLabel1.setText("File Containing Input Permutations:");

        minMaxCalculatorFileInputBrowseButton.setText("Browse");
        minMaxCalculatorFileInputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minMaxCalculatorFileInputBrowseButtonActionPerformed(evt);
            }
        });

        jLabel16.setText("Directory Containing Output File:");

        minMaxCalculatorFolderInputBrowseButton.setText("Browse");
        minMaxCalculatorFolderInputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minMaxCalculatorFolderInputBrowseButtonActionPerformed(evt);
            }
        });

        generateButton.setText("Generate Min-Max-Avg");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        minMaxOutputBrowseButton.setText("Browse");
        minMaxOutputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minMaxOutputBrowseButtonActionPerformed(evt);
            }
        });

        jLabel17.setText("Min-Max-Avg Output File:");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(jLabel1))
                    .add(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel16))
                    .add(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel17)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(generateButton)
                        .add(0, 321, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                        .add(minMaxOutputFileInput)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(minMaxOutputBrowseButton))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(minMaxCalculatorInputFileInput)
                            .add(minMaxCalculatorOutputFolderInput))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(minMaxCalculatorFileInputBrowseButton)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, minMaxCalculatorFolderInputBrowseButton))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(minMaxCalculatorInputFileInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(minMaxCalculatorFileInputBrowseButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(minMaxCalculatorFolderInputBrowseButton)
                            .add(minMaxCalculatorOutputFolderInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel16)))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(11, 11, 11)
                        .add(jLabel1)))
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(minMaxOutputBrowseButton)
                            .add(minMaxOutputFileInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(generateButton))
                    .add(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel17)))
                .addContainerGap(467, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Min-Max-Avg Calculator", jPanel4);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewHtmlLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHtmlLogButtonActionPerformed
        openFile("log.html");
    }//GEN-LAST:event_viewHtmlLogButtonActionPerformed

    private void viewTextLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTextLogButtonActionPerformed
        openFile("log.txt");
    }//GEN-LAST:event_viewTextLogButtonActionPerformed

    private void openFile(String filename) {
        try {
            Desktop.getDesktop().open(new File(filename));
        } catch (IOException e) {
            log.warn("Cannot open log file: " + filename, e);
        }
    }

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (startButton.getText().equals("Start")) {
            String inputFilePath = inputFilePathInput.getText();
            String outputFilePath = outputFilePathInput.getText();

            if (fileInputRadio.isSelected()) {
                if ("".equals(inputFilePath)) {
                    showErrorDialog("Please select the input file.");
                    return;
                }

                if ("".equals(outputFilePath)) {
                    showErrorDialog("Please select an output file.");
                    return;
                }

                try {
                    in = new BufferedReader(new FileReader(new File(inputFilePath)));
                } catch (FileNotFoundException e) {
                    showErrorDialog("Input file does not exist!");
                    return;
                }

                try {
                    out = new BufferedWriter(new FileWriter(new File(outputFilePath)));
                } catch (FileNotFoundException e) {
                    showErrorDialog("Cannot create output file!");
                    return;
                } catch (IOException e) {
                    log.error("Error writing output file", e);
                    showErrorDialog("Error writing output file: " + e.getMessage());
                    return;
                }
            }

            resultLabel.setText("");
            startButton.setText("Stop");
            setOptions();

            new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() {
                    if (fileInputRadio.isSelected()) {
                        try {
                            String line;
                            int lineCounter = 0;
                            while ((line = in.readLine()) != null) {
                                line = line.trim();
                                if ("".equals(line)) {
                                    continue;
                                }

                                lineCounter++;
                                String logText = "Processing line " + lineCounter + " containing input: " + line;
                                resultLabel.setText(logText);
                                log.info(logText);

                                Main.main(new String[]{line});
                                if (SortingByReversal.stop) {
                                    resultLabel.setText("Execution Aborted!");
                                    break;
                                }
                                log.trace("Writing output to file...");
                                out.write(Integer.toString(Main.best));
                                out.newLine();
                                out.flush();
                            }

                            resultLabel.setText("Execution Complete!");
                        } catch (IOException e) {
                            log.error("Error reading/writing file.", e);
                            showErrorDialog("Error reading/writing file: " + e.getMessage());
                        } catch (Exception e) {
                            log.error("Exception", e);
                            showErrorDialog("Unknown Error: " + e.getMessage());
                        } finally {
                            if (in != null) {
                                try {
                                    in.close();
                                } catch (IOException ignore) {
                                }
                            }
                            if (out != null) {
                                try {
                                    out.close();
                                } catch (IOException ignore) {
                                }
                            }
                        }
                    } else {
                        Main.main(new String[]{permutationInput.getText()});
                        if (Main.best == Main.USER_STOPPED_EXECUTION) {
                            resultLabel.setText("Execution Aborted!");
                        } else {
                            resultLabel.setText("Best Reversal Distance: " + Main.best + ". Execution complete!");
                        }
                    }

                    stopExecution = true;
                    SortingByReversal.stop = false;
                    startButton.setText("Start");

                    return null;
                }
            }.execute();

            stopExecution = false;
            new SwingWorker<Void, Void>() {

                int remainingRunningTimeOfAlgoInSeconds = SortingByReversal.MAX_RUNNING_TIME_OF_ALGORITHM_IN_SECONDS;

                @Override
                protected Void doInBackground() throws Exception {
                    final Timer timer = new Timer();
                    timer.schedule(new TimerTask() {

                        @Override
                        public void run() {
                            if (stopExecution) {
                                timer.cancel();
                                stopExecution = false;
                            } else {
                                showRemainingTime();
                                remainingRunningTimeOfAlgoInSeconds--;
                            }
                        }
                    }, 0, 1000);

                    return null;
                }

                private void showRemainingTime() {
                    resultLabel.setText("Estimated time remaining: " + format(remainingRunningTimeOfAlgoInSeconds));
                }

                private String format(int secs) {
                    int hours = secs / 3600,
                            remainder = secs % 3600,
                            minutes = remainder / 60,
                            seconds = remainder % 60;

                    String disHour = (hours < 10 ? "0" : "") + hours,
                            disMinu = (minutes < 10 ? "0" : "") + minutes,
                            disSec = (seconds < 10 ? "0" : "") + seconds;

                    return disHour + ":" + disMinu + ":" + disSec;
                }
            }.execute();
        } else {
            stopExecution = true;
            SortingByReversal.stop = true;
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void showErrorDialog(String message) {
        JOptionPane.showMessageDialog(this, message, "SortingByReversal",
                JOptionPane.ERROR_MESSAGE, UIManager.getIcon("OptionPane.errorIcon"));
    }

    private void singleInputRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleInputRadioActionPerformed
        toggleInputMode(false);
    }//GEN-LAST:event_singleInputRadioActionPerformed

    private void fileInputRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileInputRadioActionPerformed
        toggleInputMode(true);
    }//GEN-LAST:event_fileInputRadioActionPerformed

    private void inputFileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileBrowseButtonActionPerformed
        if(inputFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            inputFilePathInput.setText(inputFileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_inputFileBrowseButtonActionPerformed

    private void outputFileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFileBrowseButtonActionPerformed
        if(outputFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = outputFileChooser.getSelectedFile();
            if (selectedFile.exists()) {
                if (JOptionPane.showConfirmDialog(this, "Output file already exists! Overwrite?", "SortingByReversal",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                        UIManager.getIcon("OptionPane.warningIcon")) == JOptionPane.NO_OPTION) {
                    outputFileBrowseButtonActionPerformed(null);
                    return;
                }
            }
            outputFilePathInput.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_outputFileBrowseButtonActionPerformed

    private void minMaxCalculatorFileInputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minMaxCalculatorFileInputBrowseButtonActionPerformed
        if(inputFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            minMaxCalculatorInputFileInput.setText(inputFileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_minMaxCalculatorFileInputBrowseButtonActionPerformed

    private void minMaxCalculatorFolderInputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minMaxCalculatorFolderInputBrowseButtonActionPerformed
        if(outputFolderChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            minMaxCalculatorOutputFolderInput.setText(outputFolderChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_minMaxCalculatorFolderInputBrowseButtonActionPerformed

    private void minMaxOutputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minMaxOutputBrowseButtonActionPerformed
        if(outputFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = outputFileChooser.getSelectedFile();
            if (selectedFile.exists()) {
                if (JOptionPane.showConfirmDialog(this, "Output file already exists! Overwrite?", "SortingByReversal",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                        UIManager.getIcon("OptionPane.warningIcon")) == JOptionPane.NO_OPTION) {
                    outputFileBrowseButtonActionPerformed(null);
                    return;
                }
            }
            minMaxOutputFileInput.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_minMaxOutputBrowseButtonActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        String inputFilePath = minMaxCalculatorInputFileInput.getText();
        String outputFolderPath = minMaxCalculatorOutputFolderInput.getText();
        String outputFilePath = minMaxOutputFileInput.getText() + ".csv";

        if ("".equals(inputFilePath)) {
            showErrorDialog("Please select the input file.");
            return;
        }

        if ("".equals(outputFolderPath)) {
            showErrorDialog("Please select the folder containing output files.");
            return;
        }

        if ("".equals(outputFilePath)) {
            showErrorDialog("Please select an output file.");
            return;
        }

        BufferedReader inputFileReader = null;
        BufferedReader[] outputFilesReader = null;
        BufferedWriter outputFileWriter = null;

        try {
            inputFileReader = new BufferedReader(new FileReader(inputFilePath));
        } catch (FileNotFoundException e) {
            showErrorDialog("Input file does not exist!");
            return;
        }

        File[] outputFiles = new File(outputFolderPath).listFiles();
        if (outputFiles == null || outputFiles.length == 0) {
            log.error("No file exists in specified folder containing output files.");
            showErrorDialog("No file exists in specified folder containing output files.");
            return;
        }
        try {
            outputFilesReader = new BufferedReader[outputFiles.length];
            for (int i = 0; i < outputFiles.length; i++) {
                outputFilesReader[i] = new BufferedReader(new FileReader(outputFiles[i]));
            }
        } catch (IOException e) {
            log.error("Error reading output files for min-max-avg", e);
            showErrorDialog("Error reading output files for min-max-avg: " + e.getMessage());
            return;
        }

        try {
            outputFileWriter = new BufferedWriter(new FileWriter(outputFilePath));
            outputFileWriter.write("permutation,min,max,avg");
            outputFileWriter.newLine();
        } catch (FileNotFoundException e) {
            showErrorDialog("Cannot create output file for min-max-avg!");
            return;
        } catch (IOException e) {
            log.error("Error writing output file for min-max-avg", e);
            showErrorDialog("Error writing output file for min-max-avg: " + e.getMessage());
            return;
        }

        try {
            String inputPermutation;
            while ((inputPermutation = inputFileReader.readLine()) != null) {
                if ("".equals(inputPermutation.trim())) {
                    continue;
                }

                int[] reversalDistances = new int[outputFiles.length];
                String line;
                for (int i = 0; i < outputFilesReader.length; i++) {
                    line = outputFilesReader[i].readLine().trim();
                    reversalDistances[i] = Integer.parseInt(line);
                }

                int min = Utils.min(reversalDistances);
                int max = Utils.max(reversalDistances);
                float avg = Utils.avg(reversalDistances);

                outputFileWriter.write(inputPermutation + "," + min + "," + max + "," + avg);
                outputFileWriter.newLine();
            }
        } catch (IOException e) {
            log.error("Error in min-max-avg operation", e);
            showErrorDialog("Error in min-max-avg operation: " + e.getMessage());
            return;
        } finally {
            try {
                inputFileReader.close();
            } catch (IOException ignore) {
            }
            try {
                outputFileWriter.close();
            } catch (IOException ignore) {
            }
            for (BufferedReader reader : outputFilesReader) {
                try {
                    reader.close();
                } catch (IOException ignore) {
                }
            }
        }

        log.info("min-max-avg generation complete.");
        JOptionPane.showMessageDialog(this, "min-max-avg generation complete!", "SortingByReversal",
                JOptionPane.INFORMATION_MESSAGE, UIManager.getIcon("OptionPane.informationIcon"));
    }//GEN-LAST:event_generateButtonActionPerformed

    private void toggleInputMode(boolean fileInputModeSelected) {
        setFileInputEnabled(fileInputModeSelected);
        setSingleInputEnabled(!fileInputModeSelected);
    }

    private void setSingleInputEnabled(boolean enabled) {
        permutationInputLabel.setEnabled(enabled);
        permutationInput.setEnabled(enabled);
    }

    private void setFileInputEnabled(boolean enabled) {
        inputFileLabel.setEnabled(enabled);
        inputFilePathInput.setEnabled(enabled);
        inputFileBrowseButton.setEnabled(enabled);

        outputFileLabel.setEnabled(enabled);
        outputFilePathInput.setEnabled(enabled);
        outputFileBrowseButton.setEnabled(enabled);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        if (args.length > 0) {
            Main.main(args);
            return;
        }

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            log.warn("Cannot set look and feel.", e);
        }

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Gui gui = new Gui();
                Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();
                gui.setLocation(((screenDim.width - gui.getSize().width) / 2),
                        ((screenDim.height - gui.getSize().height) / 2));
                gui.setState(Frame.MAXIMIZED_BOTH);

                gui.setSingleInputEnabled(false);

                gui.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner crossoverProbabilitySpinner;
    private javax.swing.JRadioButton fileInputRadio;
    private javax.swing.JButton generateButton;
    private javax.swing.JSpinner hourSpinner;
    private javax.swing.JButton inputFileBrowseButton;
    private javax.swing.JLabel inputFileLabel;
    private javax.swing.JTextField inputFilePathInput;
    private javax.swing.ButtonGroup inputSourceRadioButtonGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox loggingLevelCombo;
    private javax.swing.JSpinner maxNoOfFittestIndividualsToSelectSpinner;
    private javax.swing.JSpinner maxNoOfIndividualsInDiversePopulationSpinner;
    private javax.swing.JSpinner maxNoOfIndividualsInSeedSpinner;
    private javax.swing.JSpinner maxNoOfMostDiverseIndividualsToSelectSpinner;
    private javax.swing.JButton minMaxCalculatorFileInputBrowseButton;
    private javax.swing.JButton minMaxCalculatorFolderInputBrowseButton;
    private javax.swing.JTextField minMaxCalculatorInputFileInput;
    private javax.swing.JTextField minMaxCalculatorOutputFolderInput;
    private javax.swing.JButton minMaxOutputBrowseButton;
    private javax.swing.JTextField minMaxOutputFileInput;
    private javax.swing.JSpinner minuteSpinner;
    private javax.swing.JSpinner mutationProbabilitySpinner;
    private javax.swing.JButton outputFileBrowseButton;
    private javax.swing.JLabel outputFileLabel;
    private javax.swing.JTextField outputFilePathInput;
    private javax.swing.JTextField permutationInput;
    private javax.swing.JLabel permutationInputLabel;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JSpinner secondSpinner;
    private javax.swing.JRadioButton singleInputRadio;
    private javax.swing.JButton startButton;
    private javax.swing.JSpinner terminationParameterSpinner;
    private javax.swing.JComboBox terminationStrategyCombo;
    private javax.swing.JCheckBox useDfsRotCheckbox;
    private javax.swing.JCheckBox useSucc2RevCheckbox;
    private javax.swing.JSpinner valueOfTInTournamentSelectionForDiversePopulationSpinner;
    private javax.swing.JSpinner valueOfTInTournamentSelectionForFittestIndividualsSpinner;
    private javax.swing.JSpinner valueOfTInTournamentSelectionForMostDiverseIndividualsSpinner;
    private javax.swing.JButton viewHtmlLogButton;
    private javax.swing.JButton viewTextLogButton;
    // End of variables declaration//GEN-END:variables

    private void setOptions() {
        SortingByReversal.MAX_NO_OF_INDIVIDUALS_IN_SEED = (Integer) maxNoOfIndividualsInSeedSpinner.getValue();
        SortingByReversal.MAX_NO_OF_INDIVIDUALS_IN_DIVERSE_POPULATION =
                (Integer) maxNoOfIndividualsInDiversePopulationSpinner.getValue();
        SortingByReversal.VALUE_OF_T_IN_TOURNAMENT_SELECTION_FOR_POPULATION_DIVERSIFIER =
                (Integer) valueOfTInTournamentSelectionForDiversePopulationSpinner.getValue();
        SortingByReversal.VALUE_OF_T_IN_TOURNAMENT_SELECTION_FOR_SELECTING_FITTEST_INDIVIDUALS =
                (Integer) valueOfTInTournamentSelectionForFittestIndividualsSpinner.getValue();
        SortingByReversal.VALUE_OF_T_IN_TOURNAMENT_SELECTION_FOR_SELECTING_MOST_DIVERSE_INDIVIDUALS =
                (Integer) valueOfTInTournamentSelectionForMostDiverseIndividualsSpinner.getValue();
        SortingByReversal.MAX_RUNNING_TIME_OF_ALGORITHM_IN_SECONDS =
                ((Integer) hourSpinner.getValue()) * 3600
                        + ((Integer) minuteSpinner.getValue()) * 60 + ((Integer) secondSpinner.getValue());
        SortingByReversal.MAX_NO_OF_FITTEST_INDIVIDUALS_TO_SELECT =
                (Integer) maxNoOfFittestIndividualsToSelectSpinner.getValue();
        SortingByReversal.MAX_NO_OF_MOST_DIVERSE_INDIVIDUALS_TO_SELECT =
                (Integer) maxNoOfMostDiverseIndividualsToSelectSpinner.getValue();
        SortingByReversal.MUTATION_PROBABILITY = (Float) mutationProbabilitySpinner.getValue();
        SortingByReversal.USE_DFS_ROT = useDfsRotCheckbox.isSelected();
        SortingByReversal.USE_SUCCESSIVE_2_REVERSAL = useSucc2RevCheckbox.isSelected();
        SortingByReversal.CROSSOVER_PROBABILITY = (Float) crossoverProbabilitySpinner.getValue();
        SortingByReversal.TERMINATION_STRATEGY = terminationStrategyCombo.getSelectedIndex();
        SortingByReversal.TERMINATION_PARAMETER = (Integer) terminationParameterSpinner.getValue();

        LogManager.getRootLogger().setLevel(Level.toLevel((String) loggingLevelCombo.getSelectedItem()));
    }
}
